import logging
import asyncio
import random
from functools import wraps
from telegram.error import BadRequest

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, ConversationHandler, filters
import db
from own import TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä
GAMES = [
    "Bopl Battle", "Buckshot Roulette", "Content Warning",
    "Lethal Company", "R.E.P.O", "WEBFISHING",
    "Minecraft", "Roblox", "Deep Rock Galactic"
]
QUOTE, AUTHOR, CONFIRM = range(3)

def restricted(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id
        if not db.is_allowed(uid):
            return None
        return await func(update, context)
    return wrapped


@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É", callback_data="random_game")],
        [InlineKeyboardButton("üìú –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    name = update.effective_user.full_name
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {name}!\n–ß–µ–≥–æ –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å?",
        reply_markup=reply_markup
    )

@restricted
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    msg = query.message

    if data == "random_game":

        await msg.edit_text("üé≤ –í—ã–±–∏—Ä–∞–µ–º –∏–≥—Ä—É...", reply_markup=None)
        for _ in range(6):
            await asyncio.sleep(1)
            game = random.choice(GAMES)
            new_text = f"üéÆ –í–æ–∑–º–æ–∂–Ω–æ: {game}"
            try:
                await msg.edit_text(new_text)
            except BadRequest as e:
                if "Message is not modified" in e.message:
                    continue
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                break

        await asyncio.sleep(1)
        final_game = random.choice(GAMES)
        await msg.edit_text(f"‚úÖ –°–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∞–µ–º –≤: *{final_game}*", parse_mode="Markdown")

    elif data == "random_quote":
        quote, author = db.get_quote()
        text = f"_{quote}_\n\n‚Äî *{author}*"
        await msg.edit_text(text, parse_mode="Markdown")

@restricted
async def mention_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    text = message.text
    normalno = ["–Ω–æ—Ä–º–∞–ª—å–Ω–æ", "–Ω0—Ä–º–∞–ª—å–Ω–æ", "–Ω–æ—Ä–º–∞–ª—å–Ω0", "–Ω–æ—Ä–º", "–Ωo—Ä–º", "–ùo—Ä–º–∞–ª—å–Ω–æ"]
    mentions = ["—É–ª—å—Ç—Ä–∞", "—Ö–µ–π —É–ª—å—Ç—Ä–∞", "—Ö–µ–π, —É–ª—å—Ç—Ä–∞", "—É–ª—å—Ç—Ä–∞!", "–ø—Ä–∏–≤–µ—Ç, —É–ª—å—Ç—Ä–∞", "–ø—Ä–∏–≤–µ—Ç —É–ª—å—Ç—Ä–∞", "–ø—Ä–∏–¥—É—Ä–æ–∫", "–ø—Ä–∏–¥—É—Ä–æ–∫!", "UltraTeam Botik"]
    chicken_jockey = ["—á–∏–∫–µ–Ω –¥–∂–æ–∫–µ", "—á–∏–∫–µ–Ω –∂–æ–∫–µ", "—á–∏–∫–µ–Ω –¥–∂–æ–∫–∏", "—á–∏–∫–µ–Ω –∂–æ–∫–∏", "—á–∏–∫–µ–Ω –¥–∂–æ–∫–µ–π", "—á–∏–∫–µ–Ω –∂–æ–∫–µ–π", "chicken jockey", "chicken jokey", "chicken jocey"]
    if any(mention == text.lower() for mention in mentions):
        await start(update, context)
    elif any(word in text.lower() for word in normalno):
        await message.reply_text(f"–£–ª—å—Ç—Ä–∞–ù–æ—Ä–º–∞–ª—å–Ω–æ? –ú–Ω–µ –±—ã–ª–æ –£–ª—å—Ç—Ä–∞–ù–æ—Ä–º–∞–ª—å–Ω–æ –æ–¥–Ω–∞–∂–¥—ã. –û–Ω–∏ –£–ª—å—Ç—Ä–∞–ó–∞–∫—Ä—ã–ª–∏ –º–µ–Ω—è –≤ –£–ª—å—Ç—Ä–∞–ö–æ–º–Ω–∞—Ç–µ. –£–ª—å—Ç—Ä–∞–†–µ–∑–∏–Ω–æ–≤–æ–π –£–ª—å—Ç—Ä–∞–ö–æ–º–Ω–∞—Ç–µ. –£–ª—å—Ç—Ä–∞–†–µ–∑–∏–Ω–æ–≤–æ–π –£–ª—å—Ç—Ä–∞–ö–æ–º–Ω–∞—Ç–µ —Å –£–ª—å—Ç—Ä–∞–ö—Ä—ã—Å–∞–º–∏. –ò –º–Ω–µ –±—ã–ª–æ –£–ª—å—Ç—Ä–∞–ù–æ—Ä–º–∞–ª—å–Ω–æ.")
    elif ")" in text.lower() and "(" not in text.lower():
        await message.reply_text(")")
    elif "—É–ª—å—Ç—Ä–∞–º–Ω–µ–Ω–∏–µ" in text.lower():
        await message.reply_text(yes_or_no())
    elif "—É–ª—å—Ç—Ä–∞–∫—Ç–æ" in text.lower():
        await message.reply_text(pick_who())
    elif any(cj in text.lower() for cj in chicken_jockey):
        await message.reply_video("cj.mp4")

@restricted
async def remove_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.message.chat.id,
        text="‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞",
        reply_markup=ReplyKeyboardRemove()
    )

@restricted
async def start_add_quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úç –ù–∞–ø–∏—à–∏ —Ü–∏—Ç–∞—Ç—É:")
    return QUOTE

# –ü–æ–ª—É—á–∏–ª–∏ —Ü–∏—Ç–∞—Ç—É
async def quote_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["quote"] = update.message.text
    await update.message.reply_text("üë§ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∞–≤—Ç–æ—Ä–∞:")
    return AUTHOR

# –ü–æ–ª—É—á–∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def author_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["author"] = update.message.text
    quote = context.user_data["quote"]
    author = context.user_data["author"]

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ]
    text = f"üìã –ü—Ä–æ–≤–µ—Ä—å:\n\n{quote}\n\n  ‚Äî {author}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?"
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
@restricted
async def confirm_or_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm":
        quote = context.user_data["quote"]
        author = context.user_data["author"]

        # üíæ –°—é–¥–∞ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—é –∑–∞–ø–∏—Å—å –≤ –ë–î:
        db.cursor.execute("INSERT INTO quotes (quote, author) VALUES (?, ?)", (quote, author))
        db.connection.commit()  # –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω–∞—á–µ ‚Äî –ø–æ–ø—Ä–∞–≤—å—Ç–µ

        await query.edit_message_text("‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    return ConversationHandler.END

def yes_or_no() -> str:

    yes = bool(random.randint(0, 1))

    yes_answers = ["–î–∞", "–ê–≥–∞", "–î—É–º–∞—é –¥–∞", "–ö–æ–Ω–µ—á–Ω–æ"]
    no_answer = ["–ù–µ—Ç", "–ù–µ–∞", "–î—É–º–∞—é –Ω–µ—Ç", "–¢–æ—á–Ω–æ –Ω–µ—Ç"]

    text = random.choice(yes_answers) if yes else random.choice(no_answer)
    return text

def pick_who() -> str:
    names = ["–ö–≤–∏–∫—Å", "–ö—É—Å—Ç", "–§–∏—à", "–ü–∏–Ω–≥–≤–∏–Ω", "–Ø"]
    words = ["–î—É–º–∞—é", "–ù–∞–≤–µ—Ä–Ω–æ–µ", "–í–µ—Ä–æ—è—Ç–Ω–æ", "", "", ""]

    name = random.choice(names)
    word = random.choice(words)
    if word == "":
        return name
    else:
        return word + " " + name

if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add_quote", start_add_quote)],
        states={
            QUOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, quote_received)],
            AUTHOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, author_received)],
            CONFIRM: [CallbackQueryHandler(confirm_or_cancel, pattern="^(confirm|cancel)$")]
        },
        fallbacks=[],
        per_message=False
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler('remove_this_fucking_keyboard', remove_buttons))
    application.add_handler(MessageHandler(filters.TEXT, mention_response))


    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()
